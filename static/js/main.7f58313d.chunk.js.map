{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","inherits","createClass","key","value","_this$props$todo","id","title","react_default","a","createElement","style","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","color","border","borderRadius","cursor","float","Todos","todos","map","components_TodoItem","headerStyle","textAlign","linkStyle","Header","react_router_dom","to","AddTodo","state","e","setState","defineProperty","target","name","onSubmit","preventDefault","addTodo","disply","flex","placeholder","className","About","Fragment","App","axios","delete","then","res","toConsumableArray","filter","post","complete","data","_this2","get","_this3","layout_Header","react_router","exact","path","render","components_AddTodo","components_Todos","component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f58313d.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\n\nexport class TodoItem extends Component {\n    getStyle = () => {\n        return {\n            background: '#f4f4f4',\n            padding: '10px',\n            borderBottom: '1px #ccc dotted',\n            textDecoration: this.props.todo.completed ? \n            'line-through' : 'none'\n        }\n    }\n\n    render() {\n        const { id, title } = this.props.todo;\n        return (\n            <div style={ this.getStyle() }>\n                <p>\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)}/> {' '}\n                     { title }\n                     <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>X</button>\n                </p>\n            </div>\n        )\n    }\n}\n\n// PropTypes\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired\n}\n\nconst btnStyle={\n    background: '#ff0000',\n    color: '#fff',\n    border:'none',\n    padding: '5px 9px',\n    borderRadius: '50%',\n    cursor:'pointer',\n    float: 'right'\n}\n\nexport default TodoItem\n","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport PropTypes from 'prop-types';\n\nclass Todos extends Component{\n\n render(){\n  return this.props.todos.map((todo) => (\n    <TodoItem key={todo.id} todo={todo} \n    markComplete={this.props.markComplete}\n    delTodo={this.props.delTodo}/>\n  ));\n}\n}\n\n// PropTypes\nTodos.propTypes = {\n    todos: PropTypes.array.isRequired,\n    markComplete: PropTypes.func.isRequired,\n    delTodo: PropTypes.func.isRequired\n\n}\n\nexport default Todos;\n","import React from 'react';\nimport { Link } from 'react-router-dom'\n\nfunction Header(){\n    return (\n        <header style={headerStyle}>\n            <h1>TodoList</h1>\n            <Link style={linkStyle} to=\"/\">Home</Link> | <Link\n            style={linkStyle} to=\"/about\">About</Link>\n        </header>\n    )\n}\n\nconst headerStyle = {\n    background: '#333',\n    color: '#fff',\n    textAlign: 'center',\n    padding: '10px'\n}\n\nconst linkStyle = {\n    color: '#fff',\n    textDecoration: 'none'\n}\n\nexport default Header;","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport class AddTodo extends Component {\n    state = {\n        title: ''\n    }\n\n    onChange=(e) => this.setState({ [e.target.name] : e.target.value });\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.props.addTodo(this.state.title);\n        this.setState({ title: '' })\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.onSubmit} style={{disply: 'flex'}}>\n                <input \n                    style={{flex: '10', padding: '5px'}}\n                    type=\"text\" \n                    name=\"title\" \n                    placeholder=\"addTodo ...\" \n                    value={this.state.title}\n                    onChange={this.onChange}\n                />\n                <input\n                    type=\"submit\"\n                    value=\"Submit\"\n                    className=\"btn\"\n                    style={{flex: '1'}}\n                />\n            </form>\n        )\n    }\n}\n\nAddTodo.propTypes = {\n    addTodo: PropTypes.func.isRequired\n}\n\nexport default AddTodo\n","import React from 'react'\n\nfunction About() {\n    return (\n        <React.Fragment>\n            <h1>About</h1>\n            <p>This is the TodoList app v1.0.0. It is part of a\n                React crash course.\n            </p>\n        </React.Fragment>\n    )\n}\n\n\nexport default About;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Todos from './components/Todos';\nimport Header from './components/layout/Header';\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About'\n//import uuid from 'uuid';\nimport axios from 'axios';\n\nimport './App.css';\n\nclass App extends Component{\n  state = {\n    todos: []\n  }\n\n  componentDidMount(){\n    axios.get('http://jsonplaceholder.typicode.com/todos?_limit=10')\n      .then(res => this.setState({ todos: res.data }))\n  }\n\n  // Toggle Complete\n  markComplete = (id) => {\n    this.setState({ todos: this.state.todos.map(todo => {\n      if(todo.id === id && todo.completed !== true) {\n        todo.completed = !todo.completed\n      }\n      return todo;\n    })});\n  }\n\n  //delete todo\n  delTodo= (id) => {\n    axios.delete(`http://jsonplaceholder.typicode.com/todos/${id}`)\n      .then(res => this.setState({ todos:[...this.state.todos.filter(todo => todo.id\n        !== id)]}));\n  }\n\n  //add todo\n  addTodo = (title) => {\n    // const newTodo = {\n    //   id: uuid.v4(),\n    //   title,\n    //   completed: false\n    // }\n    axios.post('http://jsonplaceholder.typicode.com/todos',{\n      title,\n      complete: false})\n      .then(res => this.setState({ todos: [...this.state.todos, res.data] }));\n    \n  }\n\n render(){\n  return (\n    <Router>\n      <div className=\"App\">\n        <div className=\"container\">\n          <Header />\n          <Route exact path=\"/\" render={props => (\n            <React.Fragment>\n              <AddTodo addTodo={this.addTodo}/>\n              <Todos todos={this.state.todos} markComplete={this.markComplete}\n              delTodo={this.delTodo}/>\n            </React.Fragment>\n          )} />\n          <Route path=\"/about\" component={About} />\n        </div>\n      </div>\n    </Router>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}